#!/usr/bin/python

# i3 config generator/switcher
# by Oliver Kraitschy
# http://okraits.de okraits@arcor.de

from __future__ import division
from os import path, getenv, listdir, system, sep
from sys import argv
import argparse
from string import printable
from subprocess import Popen, PIPE

DEBUG = True
if DEBUG:
    # For future use. Maybe.
    import logging
    logging.basicConfig(level=logging.DEBUG,
            format='%(levelname)-7s : %(funcName)s -> %(message)s')

WHITESPACE = " \t\n"
HOME_DIR = getenv("HOME", '')
XDG_CONFIG_DIR = getenv("XDG_CONFIG_HOME", '')

# NOTE: Allow for the existence of alternative values here?
SYSTEM_THEME_PATH = "/usr/share/j4-make-config-git/themes"

"""
We're treating the script like a class here - lots of different
    functions need access to the theme_list and I don't want to need to
    pass it in constantly.
"""
theme_list = {}

# TODO: Come up with a consistent language for blocks, blocknames, config files.

# Config Generation/Switching
#############################
class j4Config():
    """ Used to organize all of the configuration files.
    
    Every file passed into j4 is taken apart into blockname->blockcontent pairs
    and then combined into a single blockname->blockcontent dictionary."""
    PREFIX = "# $i3-"

    def __init__(self, theme_name=None, cfg_files=None, auto_run=True,
            tolerant=False, verbose=False, quiet=False):
        """ We pass in the arguments from our Parser into here.
        :param theme_name: The name of the theme. Key for `theme_list`.
        :param cfg_files: A list of all of the config file locations. Absolute.
        :param auto_run: Calls `self.run` during instance instantiation.
        :param tolerant: Doesn't exit if our theme file doesn't exist.
        :param verbose: Unused.
        :param quiet: Unused.
        """
        try:
            theme_list
        except NameError:
            # tolog
            print("Error: `theme_name` was not defined during `j4Config.__init__`.")
            exit(3)
        self.configs = {}
        self.tolerant=tolerant
        if auto_run:
            self.run(theme_name, cfg_files or [])

    # TODO decide on a consistent naming convention for cfg_files
    def run(self, theme_name, cfg_files):
        raw_configs = self.getConfigs(theme_name, cfg_files)
        self.bakeConfigs(raw_configs)

    def readConfig(self, file_path):
        """ Takes a file and extracts all of the blocks from it. """
        config_dict = {}
        try:
            with open(file_path, 'r') as file:
                block_name = None
                for line in file:
                    # Found a config block marker.
                    if line.startswith(self.PREFIX):
                        # Set our active config block
                        block_name = line.strip().lstrip(self.PREFIX)
                        if block_name not in config_dict:
                            config_dict[block_name] = []
                    # All subsequent lines are added to the active config block
                    elif block_name is not None:
                        config_dict[block_name].append(line.rstrip())
        except IOError:
            print("Error: could not open %s" % file_path)
        finally:
            # TODO: Remove trailing newlines.
            # ALSO POSSIBLE: Include $i3-end in the config files (ew).
            return config_dict

    def getConfigs(self, theme_name, config_paths):
        """ Fetches all of our config and theme files."""
        # TODO: Make raw_configs into an ordered_dict, have it used for priority.
        raw_configs = {}
        for config_path in config_paths:
            config_name = config_path.split(sep)[-1]
            raw_configs[config_name] = self.readConfig(config_path)
            logging.debug("Loaded %s.", config_name)
        if theme_name is not None:
            try:
                raw_configs['theme'] = self.readConfig(theme_list[theme_name])
                logging.debug("Added %s as a theme", theme_name)
            except KeyError:
                # Future compat with optional theme
                themes_exist = (theme_list != {})
                msg_prefix = "Warning: " if self.tolerant else "Error: "
                lvl = "WARNING" if self.tolerant else "ERROR"
                if themes_exist:
                    msg = "theme %s does not exist." % theme_name
                else:
                    msg = "No themes found."
                # tolog?
                logging.log(lvl, msg_prefix+msg)
                #print(msg_prefix + msg)
                if themes_exist:
                    print(format_themes())
                if not self.tolerant:
                    exit(1)
        return raw_configs
        
    def bakeConfigs(self, raw_configs):
        """ Combines all of the various raw_configs into a single config.
            We deal with conflicts on a mostly random basis except for `theme`
            being preferred over anything else. """
        for file_name, config_block_dict in raw_configs.items():
            # Right now, we just use whatever random order we want for these.
            # No inheritance here; just use different block names for now.
            for config_block_name, config_block_content in config_block_dict.items():
                self.configs[config_block_name] = config_block_content
                logging.debug("Added %s to `j4Config.configs`.",
                              config_block_name)
        try:
            # Theme overrides any other config file's blocks.
            for theme_block_name, theme_block_content in raw_configs['theme'].items():
                self.configs[theme_block_name] = theme_block_content
                logging.debug("Added THEME:%s to `j4Config.configs`.",
                              config_block_name)
        except KeyError:
            pass

    def __getitem__(self, key):
        return self.configs[key]

    def __contains__(self, key):
        return key in self.configs

def j4Consolidator(j4_config, i3_path, basefile_path='config'):
    """ A generator that yields lines of config with config block
    markers replaced with config blocks.
    :param i3_path: The location of our i3 config. Absolute.
    :param basefile_path: If we want to use `config.base`.
    """
    # try to open i3 base config file
    try:
        with open(path.join(i3_path, basefile_path), 'r') as basefile:
            inside_block = False
            for line in basefile:
                line = line.rstrip()
                if j4_config.PREFIX not in line:
                    # We're in a normal line.
                    if not inside_block:
                        yield line+"\n"
                    continue

                tmp_line = line.split(j4_config.PREFIX)[-1]
                preprefix = line[:line.find(j4_config.PREFIX)]
                if tmp_line in j4_config:
                    logging.info("Found a block with name  `%s`.", tmp_line)
                    if inside_block:
                        logging.error("Reached a block without ending the "
                                      "previous one.")
                        exit(1)
                        #yield preprefix + j4_config.PREFIX + "end" + "\n"
                    yield line+"\n"

                    whitespace = ' '*len(preprefix)
                    for config_line in j4_config[tmp_line]:
                        yield whitespace + config_line + "\n"
                    yield preprefix + j4_config.PREFIX + "end" + "\n"
                    inside_block = True
                else:
                    if tmp_line.startswith("end"):
                        logging.info("Ending previous block.")
                        inside_block = False
                    else:
                        logging.warning("Block with name %s called "
                                        "but not used.", tmp_line)
                        yield line+"\n"
            if inside_block:  # after looping through file
                logging.error("Reached the end of the file without "
                              "ending the previous block.")
                exit(1)
    except IOError:
        logging.error("i3 config file could not be opened.")
        exit(1)


# Argument Caching
##################
""" Instead of executing, I just do a split and load the values into the argparser. """
def get_j4_cache():
    if path.exists(HOME_DIR + "/.j4-make-config.rc"):
        try:
            rcfile = open(HOME_DIR + "/.j4-make-config.rc", "r")
        except IOError:
            print("Error: file %s could not be opened." % (HOME_DIR + "/.j4-make-config.rc"))
            exit(1)
        commandString = rcfile.read()
        rcfile.close()
        print("Executing: " + commandString)
        return commandString.split()[1:]
    else:
        print("Error: file %s does not exist yet." % (HOME_DIR + "/.j4-make-config.rc"))
        exit(1)

def set_j4_cache(theme_name, interactive=False, reread=False):
    if reread:
        return
    if theme_name is None:
        theme_name = 'none'
    if interactive:
        commandString = argv[0] + ' -r ' + theme_name
    else:
        commandString = ' '.join(argv)
    try:
        rcfile = open(HOME_DIR + "/.j4-make-config.rc", "w")
    except IOError:
        print("Error: file %s could not be opened." % (HOME_DIR + "/.j4-make-config.rc"))
        exit(1)
    rcfile.write(commandString)
    rcfile.flush()
    rcfile.close()


# Variable Preparation
######################
def detectConfigDir():
    """ We just brute force through all the locations i3 scans for. """
    i3_PATH = None
    if path.exists(HOME_DIR + "/.i3/config.base"):
        i3_PATH = HOME_DIR + "/.i3"
    elif path.exists(HOME_DIR + "/.config/i3/config.base"):
        i3_PATH = HOME_DIR + "/.config/i3"
    if path.exists(XDG_CONFIG_DIR + "/i3/config.base"):
        i3_PATH = XDG_CONFIG_DIR + "/i3"
    return i3_PATH


# Theme Preparation
###################
def format_themes():  # right now, we rely on theme_list as a global
    """ Formats the theme_list and returns the information string. """
    line = ''
    count = 8
    for x in printable:
        elements = []
        for t in sorted(theme_list.keys()):
            if t.startswith(x):
                elements.append(t)
        if elements:
            for index, i in enumerate(range(len(elements) // count + 1)):
                if index:
                    line += '\t'
                line += ', '.join(elements[i * count:(i + 1) * count]) + '\n'
    line = line.strip()

    return ("Available themes:\n"
            "=================\n" + line
    )

def rofi_gettheme(args):
    if theme_list == {}:
        print("Error: No themes found.")
        exit(1)
    ps = Popen("echo '%s' | rofi -width 30 -dmenu -p 'Set i3 theme:'" % \
            ("\n".join(sorted(theme_list.keys()))),
            stdout=PIPE, stderr=PIPE, shell=True, universal_newlines=True)
    for line in ps.stdout:
        args.theme = line[:-1]
        args.refresh = True
        # set_j4_cache(args.theme, interactive=True)
    if args.theme is None:
        exit(0)

def load_themes(filepath):
    """Returns a dictionary that takes filenames to filepaths for files in
       a given directory."""
    theme_list = {}
    try:
        # NOTE: Do we want to add some sort of constraint to what counts as a theme?
        # NOTE: What about trimming file extensions?
        for theme in listdir(filepath):
            theme_list[theme] = path.join(filepath, theme)
    except (IOError, OSError):
        pass  # We return an empty dictionary in this case.
    return theme_list


# Parsing Arguments
###################
def get_parser():
    epilog = """
examples:
    Create config file and include a specific theme:
        j4-make-config <theme-name>

    Create config file without including a theme:
        j4-make-config none

    Include a specific/no theme and reload i3 after creating the config file:
        j4-make-config -r <theme-name>|none

    Append additional configuration from files in the i3 config directory:
        j4-make-config -a <file-name> -a <another-file-name> <theme-name>|none

    Append additional configuration and reload i3 after creating the config file:
        j4-make-config -r -a <file-name> <theme-name>|none
"""

    """
    Cache the above command:
        j4-make-config -r -a <file-name> <theme-name>|none --cache

    Run j4-make-config with the cached arguments:
        j4-make-config --load-cache
    """

    arg = argparse.ArgumentParser(
              epilog=epilog,
              formatter_class=argparse.RawTextHelpFormatter,)
    
    # NOTE: Should we allow for absolute filenames here?
    arg.add_argument('-a', '--append', action='append',
                     metavar='<file-name>', default=list(),
                     help="Append additional configuration files located "
                          "in the i3 config directory.")

    arg.add_argument( '-i', '--interactive', action='store_true',
                     help="Uses rofi to select a theme.")

    arg.add_argument('-l', '--list-themes', action='store_true',
                     help='List available themes.')

    # NOTE: Should this be on by default?
    arg.add_argument('-r', '--refresh', action='store_true',
                     help='Reload i3 after creating the config file.')

    """
    # For possible future implementation.
    arg.add_argument('-c', '--cache', action='store_true',
                     help='Cache the current arguments.')

    arg.add_argument('--load-cache', action='store_true',
                     help='Use the cached arguments.)
    """

    arg.add_argument('theme', metavar='<theme-name>|none',
                     action='store', nargs='?', default=None,
                     help="Create a config file using a specific theme "
                          "or no theme.")
    return arg


def main(args):
    """Pulling together the arguments we need to run the program."""
    ## Configuring the work environment.
    # detect i3 configuration directory
    i3_PATH = detectConfigDir()
    if not i3_PATH:
        print("Error: i3 base config file could not be found.")
        exit(1)

    # set paths
    THEME_PATH = i3_PATH + sep + "themes"
    i3_CONFIG_PATH = i3_PATH + sep + "config"

    # fill themes dictionary with names and paths
    theme_list.update(load_themes(SYSTEM_THEME_PATH))
    theme_list.update(load_themes(THEME_PATH))

    if args.interactive:
        rofi_gettheme(args)

    if args.list_themes:
        print(format_themes())
        exit(0)

    if args.theme == 'none':
        args.theme = None

    j4_config = j4Config(theme_name=args.theme,
            cfg_files=(i3_PATH+sep+arg for arg in args.append))
    # We need to load this into memory now.
    j4_lines = list(j4Consolidator(j4_config, i3_PATH))

    # try to open i3 config file
    try:
        # iterate over base config lines, write all to config file
        # and insert theme config at the right place
        with open(i3_CONFIG_PATH, 'w') as configfile:
            for line in j4_lines:
                configfile.write(line)
    except IOError:
        print("Error: i3 config file could not be created.")
        exit(1)

    #if args.refresh:
    # Testing, because I hate typing `-r` each time.
    if True: 
        system("i3-msg reload")

    # store commandstring in rc file
    #if args.cache:
    if False:
        set_j4_cache(args.theme, interactive=args.interactive,
                     reread=(len(argv)==1))
    exit(0)

if __name__ == "__main__":
    ## Parsing the arguments.
    """
    if len(argv)==1:
        args = parser.parse_args(get_j4_cache())
    else:
        args = parser.parse_args() 
    """
    parser = get_parser()
    args = parser.parse_args()
    main(args)
