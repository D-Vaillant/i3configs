#!/usr/bin/python

# i3 config generator/switcher
# by Oliver Kraitschy
# http://okraits.de okraits@arcor.de

from __future__ import division
from os import path, getenv, listdir, system, sep
from sys import argv
import argparse
from string import printable
from subprocess import Popen, PIPE
## Not needed until --init works.
# from shutil import copyfile

DEBUG = False
if DEBUG:
    # For future use. Maybe.
    import logging

WHITESPACE = " \t\n"

# paths
SYSTEM_THEME_PATH = "/usr/share/j4-make-config-git/themes"
HOME_DIR = getenv("HOME", '')
XDG_CONFIG_DIR = getenv("XDG_CONFIG_HOME", '')
# variables for config processing
themes_list = {}

### Importing the config files
class j4Config():
    """ Used to organize all of the configuration files. """
    PREFIX = "# $i3-"

    def __init__(self, theme_name=None, cfg_files=None, auto_run=True,
            tolerant=False, verbose=False, quiet=False):
        """ We pass in the arguments from our Parser into here.
        :param theme_name: The name of the theme. Key for `themes_list`.
        :param auto_run: Calls `self.run` during instance instantiation.
        :param tolerant: Doesn't exit if our theme file doesn't exist.
        :param verbose: Unused.
        :param quiet: Unused.
        :param config_paths: A list of all of the config file locations. Absolute.
        """
        #self.themes_list = [] if themes_list is None else themes_list
        self.raw_configs = {}
        self.configs = {}
        self.tolerant=tolerant
        if auto_run:
            self.run(theme_name, cfg_files or [])

    def run(self, theme_name, config_paths):
        """ For `self.theme_name`k """
        if theme_name is not None:
            try:
                # Warning: This will break if `themes_list` isn't defined
                self.raw_configs['theme'] = self.readConfig(themes_list[theme_name])
            except KeyError:
                # Future compat with optional theme
                themes_exist = (themes_list != {})
                prefix = "Warning: " if self.tolerant else "Error: "
                if themes_exist:
                    msg = "theme %s does not exist." % theme_name
                else:
                    msg = "No themes found."
                print(prefix + msg)
                if themes_exist:
                    print(format_themes())
                if not self.tolerant:
                    exit(1)
            """
           except NameError:
                print("DEBUG: themes_list was not defined.")
                exit(2)
            """
        # Gets all config blocks.
        for config_path in config_paths:
            self.raw_configs[config_path.split(sep)[-1]] = self.readConfig(config_path)
        # Combines config blocks.
        self.consolidateConfigs()

    def __getitem__(self, key):
        return self.configs[key]

    """ ... don't need this, right?
    def __setitem__(self, key, value):
        self.configs[key] = value
    """

    def readConfig(self, file_path):
        """ Takes a file and extracts all of the blocks from it. """
        config_dict = {}
        try:
            with open(file_path, 'r') as file:
                block_name = None
                for line in file:
                    # Found a config block marker.
                    if self.PREFIX in line:
                        # Set our active config block
                        block_name = line.strip().lstrip(self.PREFIX)
                        if block_name not in config_dict:
                            config_dict[block_name] = []
                    # All subsequent lines are added to the active config block
                    elif block_name is not None:
                        config_dict[block_name].append(line.rstrip())
        except IOError:
            print("Error: could not open %s" % file_path)
        finally:
            return config_dict
        
    def consolidateConfigs(self):
        """ Combines all of the various raw_configs into a single config.
            We deal with conflicts on a mostly random basis except for `theme`
            being preferred over anything else. """
        for file_name, config_block_dict in self.raw_configs.items():
            if file_name == 'theme':
                continue
            # Right now, we just use whatever random order we want for these.
            # No inheritance here; just use different block names for now.
            for config_block_name, config_block_content in config_block_dict.items():
                self.configs[config_block_name] = config_block_content
        try:
            # Theme is the KING config block.
            for theme_block_name, theme_block_content in self.raw_configs['theme'].items():
                self.configs[theme_block_name] = theme_block_content
        except KeyError:
            pass


def j4Consolidator(j4_config, i3_path, basefile_path='config.base'):
    """ A generatior that yields lines of the config.base with config block
    markers replaced with config blocks.
    :param i3_path: The location of our i3 config. Absolute.
    :param basefile_path: If we don't want to call the basefile `config.base`.
    """
    # try to open i3 base config file
    try:
        with open(path.join(i3_path, basefile_path), 'r') as basefile:
            # append all additional configuration files
            for line in basefile:
                line = line.rstrip()
                # Strip away the line to just the block config name
                tmp_line = line.lstrip().split(j4_config.PREFIX)[-1]
                # Check if it's a marker
                try:
                    for config_line in j4_config[tmp_line]:
                        # Include whatever whitespace we had before the prefix
                        yield line[:line.find(j4_config.PREFIX)]+config_line+"\n"
                except KeyError:
                    yield line+"\n"
    except IOError:
        print("Error: i3 base config file could not be opened.")
        exit(1)


### Cached command.
""" Instead of executing, I just do a split and load the values into the argparser. """
def get_j4_cache():
    if path.exists(HOME_DIR + "/.j4-make-config.rc"):
        try:
            rcfile = open(HOME_DIR + "/.j4-make-config.rc", "r")
        except IOError:
            print("Error: file %s could not be opened." % (HOME_DIR + "/.j4-make-config.rc"))
            exit(1)
        commandString = rcfile.read()
        rcfile.close()
        print("Executing: " + commandString)
        return commandString.split()[1:]
    else:
        print("Error: file %s does not exist yet." % (HOME_DIR + "/.j4-make-config.rc"))
        exit(1)

def set_j4_cache(theme_name, interactive=False, reread=False):
    if reread:
        return
    if theme_name is None:
        theme_name = 'none'
    if interactive:
        commandString = argv[0] + ' -r ' + theme_name
    else:
        commandString = ' '.join(argv)
    try:
        rcfile = open(HOME_DIR + "/.j4-make-config.rc", "w")
    except IOError:
        print("Error: file %s could not be opened." % (HOME_DIR + "/.j4-make-config.rc"))
        exit(1)
    rcfile.write(commandString)
    rcfile.flush()
    rcfile.close()


def detectConfigDir():
    """ We just brute force through all the locations i3 scans for. """
    i3_PATH = None
    if path.exists(HOME_DIR + "/.i3/config.base"):
        i3_PATH = HOME_DIR + "/.i3"
    elif path.exists(HOME_DIR + "/.config/i3/config.base"):
        i3_PATH = HOME_DIR + "/.config/i3"
    if path.exists(XDG_CONFIG_DIR + "/i3/config.base"):
        i3_PATH = XDG_CONFIG_DIR + "/i3"
    return i3_PATH


### Argparser Setup
epilog = """
examples:
    Create config file and include a specific theme:
        j4-make-config <theme-name>

    Create config file without including a theme:
        j4-make-config none

    Include a specific/no theme and reload i3 after creating the config file:
        j4-make-config -r <theme-name>|none

    Append additional configuration from files in the i3 config directory:
        j4-make-config -a <file-name> -a <another-file-name> <theme-name>|none

    Append additional configuration and reload i3 after creating the config file:
        j4-make-config -r -a <file-name> <theme-name>|none

    Run j4-make-config with the most recently used arguments:
        j4-make-config
"""

def format_themes():  # right now, use global as kwarg
    """ Formats the theme_list and returns the information string. """
    line = ''
    count = 8
    for x in printable:
        elements = []
        for t in sorted(themes_list.keys()):
            if t.startswith(x):
                elements.append(t)
        if elements:
            for index, i in enumerate(range(len(elements) // count + 1)):
                if index:
                    line += '\t'
                line += ', '.join(elements[i * count:(i + 1) * count]) + '\n'
    line = line.strip()

    return ("Available themes:\n"
            "=================\n" + line
    )

parser = argparse.ArgumentParser(
        formatter_class=argparse.RawTextHelpFormatter,
        epilog=epilog,
)
parser.add_argument('-a', '--append', action='append',
        metavar='<file-name>', default=list(),
        help="Append additional configuration files located "
             "in the i3 config directory.")
parser.add_argument(
        '-i', '--interactive', action='store_true',
        help="Uses rofi to select a theme.")
parser.add_argument('-l', '--list-themes', action='store_true',
        help='List available themes.')
parser.add_argument('-r', '--refresh', action='store_true',
        help='Reload i3 after creating the config file.')
parser.add_argument('theme', action='store', nargs='?',
        metavar='<theme-name>|none', default=None,
        help="Create a config file using a specific theme or no theme.")
"""
# This doesn't work just yet.
parser.add_argument('--init', action='store_true',
        help="Automatically create `config.base`.")
"""

class j4Runner():
    def __init__(self):
        pass

### Our various methods..
def rofi_gettheme(args):
    if themes_list == {}:
        print("Error: No themes found.")
        exit(1)
    ps = Popen("echo '%s' | rofi -width 30 -dmenu -p 'Set i3 theme:'" % \
            ("\n".join(sorted(themes_list.keys()))),
            stdout=PIPE, stderr=PIPE, shell=True, universal_newlines=True)
    for line in ps.stdout:
        args.theme = line[:-1]
        args.refresh = True
        # set_j4_cache(args.theme, interactive=True)
    if args.theme is None:
        exit(0)

def load_themes(filepath):
    out = {}
    try:
        for theme in listdir(filepath):
            out[theme] = path.join(filepath, theme)
    except (IOError, OSError):
        pass
    return out

def main(args):
        ## Configuring the work environment.
    # detect i3 configuration directory
    i3_PATH = detectConfigDir()
    if not i3_PATH:
        print("Error: i3 base config file could not be found.")
        exit(1)

    # set paths
    THEME_PATH = i3_PATH + sep + "themes"
    i3_CONFIG_PATH = i3_PATH + sep + "config"

    # fill themes dictionary with names and paths
    themes_list.update(load_themes(SYSTEM_THEME_PATH))
    themes_list.update(load_themes(THEME_PATH))
    """ We've moved these checks to when we actually need themes.
    if themes_list == {}:
        print("Error: No themes found.")
        exit(1)
    """

    if args.interactive:
        rofi_gettheme(args)

    if args.list_themes:
        print(format_themes())
        exit(0)

    """ We don't need this at this point.
    if args.theme is None:
        print("Error: theme argument is missing.")
        exit(1)
    """
    if args.theme == 'none':
        args.theme = None

    j4_config = j4Config(theme_name=args.theme,
            cfg_files=(i3_PATH+sep+arg for arg in args.append))
    j4_lines = j4Consolidator(j4_config, i3_PATH)

    # try to open i3 config file
    try:
        # iterate over base config lines, write all to config file
        # and insert theme config at the right place
        with open(i3_CONFIG_PATH, 'w') as configfile:
            for line in j4_lines:
                configfile.write(line)
    except IOError:
        print("Error: i3 config file could not be created.")
        exit(1)

    if args.refresh:
        system("i3-msg reload")

    # store commandstring in rc file
    set_j4_cache(args.theme, interactive=args.interactive, reread=(len(argv)==1))
    exit(0)

if __name__ == "__main__":
    ## Parsing the arguments.
    if len(argv)==1:
        args = parser.parse_args(get_j4_cache())
    else:
        args = parser.parse_args() 
    main(args)
