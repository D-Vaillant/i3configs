#!/usr/bin/python

# i3 config generator/switcher
# by Oliver Kraitschy
# http://okraits.de okraits@arcor.de

from os import path, getenv, listdir, system, sep
from sys import argv
import argparse
from string import printable
from subprocess import Popen, PIPE

## Not needed until --init works.
# from shutil import copyfile

WHITESPACE = " \t\n"

class j4Config():
    """ Used to organize all of the configuration files. """
    PREFIX = "# $i3-"

    def __init__(self, theme_name=None, auto_run=True,
            tolerant=False, verbose=False, quiet=False, *config_paths):
        """ We pass in the arguments from our Parser into here.
        theme goes to `theme_name`, the appended files go to `config_paths`."""

        self.raw_configs = {}
        self.configs = {}
        if auto_run:
            self.run()

    def run(self, theme_name):
        """ For `self.theme_name`k """
        if theme_name is not None:
            try:
                self.readConfig(themes_list[theme_name], name="theme")
            except KeyError:
                prefix = "Warning: " if tolerant else "Error: "
                print(prefix + "theme %s does not exist." % theme_name)
                print_info(usage=False)
                if not tolerant:
                    exit(1)
        for config_path in config_paths:
            # Gets all config blocks.
            self.readThemefile(config_path)
        # Combines config blocks.
        self.consolidateConfigs()

    def __getitem__(self, key):
        return self.configs[key]

    def __setitem__(self, key, value):
        self.configs[key] = value

    def readConfig(self, file_path, name=None):
        """ Takes a file and extracts all of the blocks from it. """
        if name is None:
            name = file_path.split(sep)[-1]
        self.raw_configs[name] = {}
        try:
            with open(file_path, 'r') as file:
                block_name = None
                for line in file:
                    if self.PREFIX in line:
                        block_name = line.strip().lstrip(self.PREFIX)
                        if block_name not in self.raw_configs[name]:
                            self.raw_configs[name][block_name] = []
                    elif block_name is not None:
                        self.raw_configs[name][block_name].append(line.rstrip())
        except IOError:
            print("Error: could not open %s" % file_path)
        
    def consolidateConfigs(self):
        """ Combines all of the various raw_configs into a single config.
            We deal with conflicts on a mostly random basis except for `theme`
            being preferred over anything else. """
        for file_name, config_block_dict in self.raw_configs.items():
            if file_name == 'theme':
                continue
            for config_block_name, config_block_content in config_block_dict:
                self.configs[config_block_name] = config_block_content
        try:
            for theme_block_name, theme_block_content in self.raw_configs['theme'].items():
                self.configs[theme_block_name] = theme_block_content
        except KeyError:
            pass

    def __iter__(self, basefile_path='config.base', i3_path=None):
        """ A generatior that yields lines of the config.base with config block
            markers replaced with config blocks.
            Either we pass the absolute basefile_path, or the relative basefile_path
            and the i3 config path. """
        # Get the config directory path.
        if i3_path is None:
            i3_path = path.join(*basefile.split(sep)[:-1])
        # Make sure this is relative.
        basefile_path = basefile_path.split(sep)[-1]
        # try to open i3 base config file
        try:
            with open(path.join(i3_path, basefile_path), 'r') as basefile:
                # append all additional configuration files
                for line in basefile:
                    line = line.rstrip()
                    # Strip away the line to just the block config name
                    tmp_line = line.lstrip(WHITESPACE+self.PREFIX)
                    # Check if it's a marker
                    if tmp_line in self.configs:
                        for config_line in self.configs[tmp_line]:
                            # Include whatever whitespace we had before the prefix
                            yield line[:line.find(SELF.PREFIX)]+config_line
                    else:
                        yield line
        except IOError:
            print("Error: i3 base config file could not be opened.")
            exit(1)

# paths
SYSTEM_THEME_PATH = "/usr/share/j4-make-config-git/themes"
THEME_PATH = ""
i3_PATH = ""
i3_BASECONFIG_PATH = ""
i3_CONFIG_PATH = ""
# variables for config processing
themes_list = {}
baselines_list = []
windowActive = False
barActive = False
windowText = ""
barText = ""
commandString = ""

def detectConfigDir():
    i3_PATH = None
    if path.exists(getenv("HOME") + "/.i3/config.base"):
        i3_PATH = getenv("HOME") + "/.i3"
    elif path.exists(getenv("HOME") + "/.config/i3/config.base"):
        i3_PATH = getenv("HOME") + "/.config/i3"
    elif getenv("XDG_CONFIG_HOME") is not None:
        if path.exists(getenv("XDG_CONFIG_HOME") + "/i3/config.base"):
            i3_PATH = getenv("XDG_CONFIG_HOME") + "/i3"
    return i3_PATH

usage_info = """Usage examples:
===============
Create config file and include a specific theme:
\tj4-make-config <theme-name>
Create config file without including a theme:
\tj4-make-config none
Include a specific/no theme and reload i3 after creating the config file:
\tj4-make-config -r <theme-name>|none
Append additional configuration from files in the i3 config directory:
\tj4-make-config -a <file-name> -a <another-file-name> <theme-name>|none
Append additional configuration and reload i3 after creating the config file:
\tj4-make-config -r -a <file-name> <theme-name>|none
Run j4-make-config with the most recently used arguments:
\tj4-make-config"""

def ThemeListStr():
    line = ''
    count = 8
    for x in printable:
        elements = []
        for t in sorted(themes_list.keys()):
            if t.startswith(x):
                elements.append(t)
        if elements:
            for index, i in enumerate(range(len(elements) / count + 1)):
                if index:
                    line += '\t'
                line += ', '.join(elements[i * count:(i + 1) * count]) + '\n'
    line = line.strip()

    return ("Available themes:\n"
            "=================\n" + line
    )

def print_info(usage=True, themes=True):
    if usage:
        print(usage_info)
    if themes:
        print(ThemeListStr())

""" Instead of executing, I just do a split and load the values into the argparser. """
def get_j4_cache():
    if path.exists(getenv("HOME") + "/.j4-make-config.rc"):
        try:
            rcfile = open(getenv("HOME") + "/.j4-make-config.rc", "r")
        except IOError:
            print("Error: file %s could not be opened." % (getenv("HOME") + "/.j4-make-config.rc"))
            exit(1)
        commandString = rcfile.read()
        rcfile.close()
        print("Executing: " + commandString)
        return commandString.split()[1:]
    else:
        print("Error: file %s does not exist yet." % (getenv("HOME") + "/.j4-make-config.rc"))
        exit(1)

def set_j4_cache(theme_name, interactive=False):
    if interactive:
        commandString = argv[0] + ' -r ' + theme_name
    else:
        commandString = ' '.join(argv)
    try:
        rcfile = open(getenv("HOME") + "/.j4-make-config.rc", "w")
    except IOError:
        print("Error: file %s could not be opened." % (getenv("HOME") + "/.j4-make-config.rc"))
        exit(1)
    rcfile.write(commandString)
    rcfile.flush()
    rcfile.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='i3 config generator/switcher')
    parser.add_argument('--themes', action='store_true',
            help="Displays all available themes.")
    parser.add_argument(
            '-i', '--interactive', action='store_true',
            help="Uses rofi to select a theme.")
    parser.add_argument('-r', '--refresh', action='store_true',
            help='Reload i3 after creating the config file.')
    parser.add_argument('-a', '--append', action='append',
            metavar='<file-name>', default=list(),
            help="Append additional configuration files located "
                 "in the i3 config directory.")
    parser.add_argument('theme', action='store', nargs='?',
            metavar='<theme-name>|none', default=None,
            help="Create a config file using a specific theme or no theme.")
    """
    # This doesn't work just yet.
    parser.add_argument('--init', action='store_true',
            help="Automatically create `config.base`.")
    """

    ## Parsing the arguments.
    if len(argv)==1:
        args = parser.parse_args(get_j4_cache())
    else:
        args = parser.parse_args() 

    ## Configuring the work environment.
    # detect i3 configuration directory
    i3_PATH = detectConfigDir()
    if not i3_PATH:
        print("Error: i3 base config file could not be found.")
        exit(1)
    else:
        # set paths
        THEME_PATH = i3_PATH + "/themes"
        i3_BASECONFIG_PATH = i3_PATH + "/config.base"
        i3_CONFIG_PATH = i3_PATH + "/config"
        # fill themes dictionary with names and paths
        try:
            for theme in listdir(SYSTEM_THEME_PATH):
                themes_list[theme] = SYSTEM_THEME_PATH + sep + theme
        except (IOError, OSError):
            pass

        try:
            for theme in listdir(THEME_PATH):
                themes_list[theme] = THEME_PATH + sep + theme
        except (IOError, OSError):
            pass

        if themes_list == {}:
            print("Error: No themes found.")
            exit(1)

    """
    if args.init:
        copyfile(i3_CONFIG_PATH, i3_BASECONFIG_PATH)
        print("Created config.base in %s." % i3_PATH)
        exit(0)
    """

    ## Parsing the arguments.
    if len(argv)==1:
        args = parser.parse_args(get_j4_cache())
    else:
        args = parser.parse_args() 
    if args.interactive:
        ps = Popen("echo '%s' | rofi -width 30 -dmenu -p 'Set i3 theme:'" % \
                ("\n".join(sorted(themes_list.keys()))),
                stdout=PIPE, stderr=PIPE, shell=True, universal_newlines=True)
        for line in ps.stdout:
            args.theme = line[:-1]
            args.refresh = True
            set_j4_cache(args.theme, interactive=True)
        if args.theme is None:
            exit(0)
    if args.themes:
        print(ThemeListStr())
        exit(0)
    if args.theme is not None and args.theme != 'none':
        # try to open given filename
        try:
            themefile = open(themes_list[args.theme], "r")
        except (KeyError, IOError):
            print("Error: theme %s does not exist." % args.theme)
            print_info(usage=False)
            exit(1)
        
        # read themefile, create section strings
        for line in themefile:
            if "$i3-theme-window" in line:
                windowActive = True
                barActive = False
            elif "$i3-theme-bar" in line:
                windowActive = False
                barActive = True
            else:
                if windowActive and not barActive:
                    windowText += line
                elif not windowActive and barActive:
                    barText += line
        themefile.close()
    
    # try to open i3 base config file
    try:
        basefile = open(i3_BASECONFIG_PATH, "r")
    except IOError:
        print("Error: i3 base config file could not be opened.")
        exit(1)
    # read all lines of base config into list
    baselines_list.extend(basefile.readlines())
    basefile.close()
    
    # append all additional configuration files
    for appendFilename in args.append:
        try:
            appendFile = open(i3_PATH + "/" + appendFilename, "r")
        except IOError:
            print("Error: file %s could not be opened." % appendFilename)
            exit(1)
        # read all lines of appendFile into list
        baselines_list.extend(appendFile.readlines())
        appendFile.close()
    
    # try to open i3 config file
    try:
        configfile = open(i3_CONFIG_PATH, "w")
    except IOError:
        print("Error: i3 config file could not be created.")
        exit(1)
    
    # iterate over base config lines, write all to config file
    # and insert theme config at the right place
    for line in baselines_list:
        if line.lstrip().startswith("# $i3-theme-window"):
            if args.theme is not None:
                configfile.write(windowText)
        elif line.lstrip().startswith("# $i3-theme-bar"):
            if args.theme is not None:
                configfile.write(barText)
        else:
            configfile.write(line)
    configfile.flush()
    configfile.close()

    if args.refresh:
        system("i3-msg reload")
    
    # store commandstring in rc file
    set_j4_cache(args.theme, interactive=False)
    exit(0)
